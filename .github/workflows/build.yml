name: Build SGuardLimit Project

on: [push, workflow_dispatch]

env:
  WDK_VERSION: "10.0.22621.0"
  SDK_VERSION: "22621"  # 必须与 setup-windows10-sdk-action 的 5 位版本号一致

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v2
      with:
    # The preferred processor architecture of MSBuild. Can be either "x86", "x64", or "arm64". "x64" is only available from Visual Studio version 17.0 and later.
        msbuild-architecture: x64 # optional, default is x86
          

    # 步骤1：安装 Windows 10 SDK
    - name: Setup Windows 10 SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
      with:
        sdk-version: ${{ env.SDK_VERSION }}  # 22621 对应 Windows 11 SDK (10.0.22621.0)

    # 步骤2：安装 WDK
    - name: Install WDK
      shell: powershell
      run: |
        $wdkUrl = "https://go.microsoft.com/fwlink/?linkid=2166289"
        $installerPath = "$env:RUNNER_TEMP\wdksetup.exe"
        
        # 下载 WDK
        Invoke-WebRequest -Uri $wdkUrl -OutFile $installerPath
        
        # 安装 WDK
        Start-Process -Wait -FilePath $installerPath -ArgumentList @(
          "/quiet",
          "/norestart",
          "/features +"
        )
        
        # 验证安装
        # $ntifsPath = "C:\Program Files (x86)\Windows Kits\10\Include\$env:WDK_VERSION\km\ntifs.h"
        # if (-not (Test-Path $ntifsPath)) {
        #   Write-Host "##[error] WDK installation failed - ntifs.h not found!"
        #   exit 1
        # }

    # 步骤3：配置环境变量
    - name: Setup Build Environment
      shell: powershell
      run: |
        # 设置 SDK/WDK 路径
        $sdkDir = "C:\Program Files (x86)\Windows Kits\10"
        echo "WindowsSdkDir=$sdkDir" >> $env:GITHUB_ENV
        echo "WindowsSDKVersion=$env:WDK_VERSION" >> $env:GITHUB_ENV
        
        # 设置包含路径
        $env:INCLUDE = "$sdkDir\Include\$env:WDK_VERSION\km;$sdkDir\Include\$env:WDK_VERSION\shared;$env:INCLUDE"
        $env:LIB = "$sdkDir\Lib\$env:WDK_VERSION\km\x64;$env:LIB"

    # 步骤4：编译驱动项目
    - name: Build Driver
      shell: powershell
      run: |
        cd SGuardLimit_VMIO
        
        & msbuild SGuardLimit_VMIO.vcxproj `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:WindowsTargetPlatformVersion=$env:WDK_VERSION `
          /p:PlatformToolset=WindowsKernelModeDriver10.0 `
          /p:AdditionalIncludeDirectories="C:\Program Files (x86)\Windows Kits\10\Include\$env:WDK_VERSION\km" `
          /p:PreprocessorDefinitions="WIN64;_AMD64_;NTDDI_VERSION=0x0A000006" `
          /flp:"LogFile=driver_build.log;Verbosity=diagnostic"
        
        if (-not (Test-Path "x64\Release\Hutao.sys")) {
          Write-Host "##[error] Driver compilation failed!"
          Get-Content "driver_build.log" -Tail 100 | Write-Host
          exit 1
        }

    # 步骤5：编译用户层程序
    - name: Build User Application
      shell: powershell
      run: |
        cd sguard_limit
        & msbuild sguard_limit.sln `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /flp:"LogFile=user_build.log;Verbosity=diagnostic"

    # 上传产物
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          SGuardLimit_VMIO/x64/Release/Hutao.sys
          sguard_limit/x64/Release/*.exe
