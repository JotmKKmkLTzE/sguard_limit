name: Build SGuardLimit Project

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  WDK_VERSION: "10.0.22621.0"

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 步骤1：安装VS Build Tools（官方方式）
    - name: Install VS Build Tools
      run: |
        # 下载VS Build Tools安装程序
        Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_buildtools.exe" -OutFile vs_buildtools.exe
        
        # 安装必要组件
        Start-Process -Wait -FilePath .\vs_buildtools.exe -ArgumentList @(
          "--quiet",
          "--norestart",
          "--wait",
          "--add Microsoft.VisualStudio.Workload.VCTools",
          "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
          "--add Microsoft.VisualStudio.Component.Windows10SDK.$env:WDK_VERSION"
        )
        
        # 验证安装
        if (-not (Test-Path "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC")) {
          Write-Error "VS Build Tools installation failed!"
          exit 1
        }

    # 步骤2：安装WDK（独立安装）
    - name: Install WDK Standalone
      run: |
        # 下载WDK
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2166289" -OutFile wdksetup.exe
        
        # 静默安装到自定义目录
        Start-Process -Wait -FilePath .\wdksetup.exe -ArgumentList @(
          "/quiet",
          "/norestart",
          "/installpath `"C:\WDK`""
        )
        
        # 验证WDK安装
        $ntifsPath = "C:\WDK\Include\$env:WDK_VERSION\km\ntifs.h"
        if (-not (Test-Path $ntifsPath)) {
          Write-Error "WDK installation failed - ntifs.h not found!"
          Write-Host "Available WDK versions:"
          Get-ChildItem "C:\WDK\Include" | Select-Object Name
          exit 1
        }
        
        # 设置环境变量
        echo "WINDOWSSDKDIR=C:\WDK" >> $env:GITHUB_ENV
        echo "WindowsSdkDir=C:\WDK" >> $env:GITHUB_ENV
        echo "WindowsSDKVersion=$env:WDK_VERSION" >> $env:GITHUB_ENV

    # 步骤3：配置编译环境
    - name: Setup Build Environment
      run: |
        # 设置完整的环境变量
        $env:INCLUDE = "C:\WDK\Include\$env:WDK_VERSION\km;C:\WDK\Include\$env:WDK_VERSION\shared;$env:INCLUDE"
        $env:LIB = "C:\WDK\Lib\$env:WDK_VERSION\km\x64;$env:LIB"
        
        # 打印关键路径验证
        Write-Host "WDK include paths:"
        dir "C:\WDK\Include\$env:WDK_VERSION\km\n*" | Select-Object Name

    # 步骤4：编译驱动项目
    - name: Build SGuardLimit_VMIO Driver
      run: |
        cd SGuardLimit_VMIO
        
        # 使用完整路径调用MSBuild
        & "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\msbuild.exe" SGuardLimit_VMIO.vcxproj `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:WindowsTargetPlatformVersion=$env:WDK_VERSION `
          /p:PlatformToolset=WindowsKernelModeDriver10.0 `
          /p:AdditionalIncludeDirectories="C:\WDK\Include\$env:WDK_VERSION\km;C:\WDK\Include\$env:WDK_VERSION\shared" `
          /p:PreprocessorDefinitions="WIN64;_AMD64_;NTDDI_VERSION=0x0A000006"
        
        if (-not (Test-Path "x64\Release\Hutao.sys")) {
          Write-Error "Driver compilation failed!"
          Get-Content "x64\Release\*.log" -ErrorAction SilentlyContinue
          exit 1
        }

    # 步骤5：编译用户层解决方案
    - name: Build sguard_limit Solution
      run: |
        & "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\msbuild.exe" sguard_limit.sln `
          /p:Configuration=Release `
          /p:Platform=x64

    # 上传产物
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sguard_limit_binaries
        path: |
          SGuardLimit_VMIO/x64/Release/Hutao.sys
          x64/Release/*.exe
